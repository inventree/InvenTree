# Generated by Django 4.2.19 on 2025-03-10 22:44

import InvenTree.fields
import InvenTree.models
import InvenTree.validators
import common.currency
import common.icons
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
import djmoney.models.validators
import part.models
import part.settings
import stdimage.models


class Migration(migrations.Migration):

    replaces = [('part', '0001_initial'), ('part', '0002_auto_20190520_2204'), ('part', '0003_auto_20190525_2226'), ('part', '0004_auto_20190525_2356'), ('part', '0005_auto_20190526_1119'), ('part', '0006_auto_20190526_1215'), ('part', '0007_auto_20190602_1944'), ('part', '0008_auto_20190618_0042'), ('part', '0009_part_virtual'), ('part', '0010_auto_20190620_2135'), ('part', '0011_part_revision'), ('part', '0012_auto_20190627_2144'), ('part', '0013_auto_20190628_0951'), ('part', '0014_partparameter'), ('part', '0015_auto_20190820_0251'), ('part', '0016_auto_20190820_0257'), ('part', '0017_bomitem_checksum'), ('part', '0018_auto_20190907_0941'), ('part', '0019_auto_20190908_0404'), ('part', '0020_auto_20190908_0404'), ('part', '0021_auto_20190908_0916'), ('part', '0022_auto_20190908_0918'), ('part', '0023_auto_20190913_1401'), ('part', '0024_auto_20191118_2139'), ('part', '0025_auto_20191118_2316'), ('part', '0026_auto_20200131_1022'), ('part', '0027_auto_20200202_1024'), ('part', '0028_auto_20200203_1007'), ('part', '0029_auto_20200223_0901'), ('part', '0030_auto_20200318_1027'), ('part', '0031_auto_20200318_1044'), ('part', '0032_auto_20200322_0453'), ('part', '0033_auto_20200404_0445'), ('part', '0034_auto_20200404_1238'), ('part', '0035_auto_20200406_0045'), ('part', '0036_partattachment_user'), ('part', '0037_partattachment_upload_date'), ('part', '0038_auto_20200513_0016'), ('part', '0039_auto_20200515_1127'), ('part', '0040_parttesttemplate'), ('part', '0041_auto_20200517_0348'), ('part', '0042_auto_20200518_0900'), ('part', '0043_auto_20200527_0005'), ('part', '0044_auto_20200605_0931'), ('part', '0045_auto_20200605_0932'), ('part', '0046_auto_20200804_0107'), ('part', '0047_auto_20200808_0715'), ('part', '0048_auto_20200902_1404'), ('part', '0049_partsellpricebreak'), ('part', '0050_auto_20200917_2315'), ('part', '0051_bomitem_optional'), ('part', '0052_partrelated'), ('part', '0053_partcategoryparametertemplate'), ('part', '0054_auto_20201109_1246'), ('part', '0055_auto_20201110_1001'), ('part', '0056_auto_20201110_1125'), ('part', '0057_remove_partsellpricebreak_currency'), ('part', '0058_remove_partsellpricebreak_cost'), ('part', '0059_auto_20201112_1112'), ('part', '0060_merge_20201112_1722'), ('part', '0061_auto_20210103_2313'), ('part', '0061_auto_20210104_2331'), ('part', '0062_merge_20210105_0056'), ('part', '0063_bomitem_inherited'), ('part', '0064_auto_20210404_2016'), ('part', '0065_auto_20210505_2144'), ('part', '0066_bomitem_allow_variants'), ('part', '0067_partinternalpricebreak'), ('part', '0068_part_unique_part'), ('part', '0069_auto_20210701_0509'), ('part', '0070_alter_part_variant_of'), ('part', '0071_alter_partparametertemplate_name'), ('part', '0072_bomitemsubstitute'), ('part', '0073_auto_20211013_1048'), ('part', '0074_partcategorystar'), ('part', '0075_auto_20211128_0151'), ('part', '0076_auto_20220516_0819'), ('part', '0077_alter_bomitem_unique_together'), ('part', '0078_auto_20220606_0024'), ('part', '0079_alter_part_notes'), ('part', '0080_alter_part_image'), ('part', '0081_alter_partcategory_name'), ('part', '0082_partcategory_pathstring'), ('part', '0083_auto_20220731_2357'), ('part', '0084_partcategory_icon'), ('part', '0085_partparametertemplate_description'), ('part', '0086_auto_20220912_0007'), ('part', '0087_bomitem_consumable'), ('part', '0088_alter_partparametertemplate_name'), ('part', '0089_auto_20221112_0128'), ('part', '0090_auto_20221115_0816'), ('part', '0091_partstocktake'), ('part', '0092_part_last_stocktake'), ('part', '0093_auto_20230115_1404'), ('part', '0094_alter_part_units'), ('part', '0095_alter_part_responsible'), ('part', '0096_auto_20230211_0029'), ('part', '0097_partstocktakereport'), ('part', '0098_auto_20230214_1115'), ('part', '0099_alter_bomitem_inherited'), ('part', '0100_alter_bomitem_reference'), ('part', '0101_bomitem_validated'), ('part', '0102_auto_20230314_0112'), ('part', '0103_auto_20230317_0816'), ('part', '0104_alter_part_description'), ('part', '0105_alter_part_notes'), ('part', '0106_part_tags'), ('part', '0107_alter_part_tags'), ('part', '0108_auto_20230516_1334'), ('part', '0109_auto_20230517_1048'), ('part', '0110_alter_part_units'), ('part', '0111_auto_20230521_1350'), ('part', '0112_auto_20230525_1606'), ('part', '0113_auto_20230531_1205'), ('part', '0114_alter_part_minimum_stock'), ('part', '0115_part_responsible_owner'), ('part', '0116_auto_20231023_0332'), ('part', '0117_remove_part_responsible'), ('part', '0118_auto_20231024_1844'), ('part', '0119_auto_20231120_0457'), ('part', '0120_parttesttemplate_key'), ('part', '0121_auto_20240207_0344'), ('part', '0122_parttesttemplate_enabled'), ('part', '0123_parttesttemplate_choices'), ('part', '0124_delete_partattachment'), ('part', '0125_part_locked'), ('part', '0126_part_revision_of'), ('part', '0127_remove_partcategory_icon_partcategory__icon'), ('part', '0128_part_testable'), ('part', '0129_auto_20240815_0214'), ('part', '0130_alter_parttesttemplate_part'), ('part', '0131_partrelated_note'), ('part', '0132_partparametertemplate_selectionlist'), ('part', '0133_alter_partcategory__icon')]

    initial = True

    dependencies = [
        ('auth', '__first__'),
        ('common', '0001_remaked_20250310'),
    ]

    operations = [
        migrations.CreateModel(
            name='BomItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('quantity', models.DecimalField(decimal_places=5, default=1.0, help_text='BOM quantity for this BOM item', max_digits=15, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quantity')),
                ('optional', models.BooleanField(default=False, help_text='This BOM item is optional', verbose_name='Optional')),
                ('consumable', models.BooleanField(default=False, help_text='This BOM item is consumable (it is not tracked in build orders)', verbose_name='Consumable')),
                ('overage', models.CharField(blank=True, help_text='Estimated build wastage quantity (absolute or percentage)', max_length=24, validators=[InvenTree.validators.validate_overage], verbose_name='Overage')),
                ('reference', models.CharField(blank=True, help_text='BOM item reference', max_length=5000, verbose_name='Reference')),
                ('note', models.CharField(blank=True, help_text='BOM item notes', max_length=500, verbose_name='Note')),
                ('checksum', models.CharField(blank=True, help_text='BOM line checksum', max_length=128, verbose_name='Checksum')),
                ('validated', models.BooleanField(default=False, help_text='This BOM item has been validated', verbose_name='Validated')),
                ('inherited', models.BooleanField(default=False, help_text='This BOM item is inherited by BOMs for variant parts', verbose_name='Gets inherited')),
                ('allow_variants', models.BooleanField(default=False, help_text='Stock items for variant parts can be used for this BOM item', verbose_name='Allow Variants')),
            ],
            options={
                'verbose_name': 'BOM Item',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BomItemSubstitute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
            ],
            options={
                'verbose_name': 'BOM Item Substitute',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Part',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('notes', InvenTree.fields.InvenTreeNotesField(blank=True, help_text='Markdown notes (optional)', max_length=50000, null=True, verbose_name='Notes')),
                ('barcode_data', models.CharField(blank=True, help_text='Third party barcode data', max_length=500, verbose_name='Barcode Data')),
                ('barcode_hash', models.CharField(blank=True, help_text='Unique hash of barcode data', max_length=128, verbose_name='Barcode Hash')),
                ('name', models.CharField(help_text='Part name', max_length=100, verbose_name='Name')),
                ('is_template', models.BooleanField(default=part.settings.part_template_default, help_text='Is this part a template part?', verbose_name='Is Template')),
                ('description', models.CharField(blank=True, help_text='Part description (optional)', max_length=250, verbose_name='Description')),
                ('keywords', models.CharField(blank=True, help_text='Part keywords to improve visibility in search results', max_length=250, null=True, verbose_name='Keywords')),
                ('IPN', models.CharField(blank=True, help_text='Internal Part Number', max_length=100, null=True, verbose_name='IPN')),
                ('revision', models.CharField(blank=True, help_text='Part revision or version number', max_length=100, null=True, verbose_name='Revision')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to external URL', max_length=2000, null=True, verbose_name='Link')),
                ('image', stdimage.models.StdImageField(blank=True, force_min_size=False, null=True, upload_to=part.models.rename_part_image, variations={'preview': (256, 256), 'thumbnail': (128, 128)}, verbose_name='Image')),
                ('default_expiry', models.PositiveIntegerField(default=0, help_text='Expiry time (in days) for stock items of this part', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Default Expiry')),
                ('minimum_stock', models.DecimalField(decimal_places=6, default=0, help_text='Minimum allowed stock level', max_digits=19, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Minimum Stock')),
                ('units', models.CharField(blank=True, default='', help_text='Units of measure for this part', max_length=20, null=True, validators=[InvenTree.validators.validate_physical_units], verbose_name='Units')),
                ('assembly', models.BooleanField(default=part.settings.part_assembly_default, help_text='Can this part be built from other parts?', verbose_name='Assembly')),
                ('component', models.BooleanField(default=part.settings.part_component_default, help_text='Can this part be used to build other parts?', verbose_name='Component')),
                ('trackable', models.BooleanField(default=part.settings.part_trackable_default, help_text='Does this part have tracking for unique items?', verbose_name='Trackable')),
                ('testable', models.BooleanField(default=False, help_text='Can this part have test results recorded against it?', verbose_name='Testable')),
                ('purchaseable', models.BooleanField(default=part.settings.part_purchaseable_default, help_text='Can this part be purchased from external suppliers?', verbose_name='Purchaseable')),
                ('salable', models.BooleanField(default=part.settings.part_salable_default, help_text='Can this part be sold to customers?', verbose_name='Salable')),
                ('active', models.BooleanField(default=True, help_text='Is this part active?', verbose_name='Active')),
                ('locked', models.BooleanField(default=False, help_text='Locked parts cannot be edited', verbose_name='Locked')),
                ('virtual', models.BooleanField(default=part.settings.part_virtual_default, help_text='Is this a virtual part, such as a software product or license?', verbose_name='Virtual')),
                ('bom_checksum', models.CharField(blank=True, help_text='Stored BOM checksum', max_length=128, verbose_name='BOM checksum')),
                ('bom_checked_date', models.DateField(blank=True, null=True, verbose_name='BOM checked date')),
                ('creation_date', models.DateField(auto_now_add=True, null=True, verbose_name='Creation Date')),
                ('last_stocktake', models.DateField(blank=True, null=True, verbose_name='Last Stocktake')),
                ('base_cost', models.DecimalField(decimal_places=6, default=0, help_text='Minimum charge (e.g. stocking fee)', max_digits=19, validators=[django.core.validators.MinValueValidator(0)], verbose_name='base cost')),
                ('multiple', models.PositiveIntegerField(default=1, help_text='Sell multiple', validators=[django.core.validators.MinValueValidator(1)], verbose_name='multiple')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Part',
                'verbose_name_plural': 'Parts',
                'ordering': ['name'],
            },
            bases=(InvenTree.models.InvenTreeAttachmentMixin, InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PartCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('name', models.CharField(help_text='Name', max_length=100, verbose_name='Name')),
                ('description', models.CharField(blank=True, help_text='Description (optional)', max_length=250, verbose_name='Description')),
                ('pathstring', models.CharField(blank=True, help_text='Path', max_length=250, verbose_name='Path')),
                ('structural', models.BooleanField(default=False, help_text='Parts may not be directly assigned to a structural category, but may be assigned to child categories.', verbose_name='Structural')),
                ('default_keywords', models.CharField(blank=True, help_text='Default keywords for parts in this category', max_length=250, null=True, verbose_name='Default keywords')),
                ('_icon', models.CharField(blank=True, db_column='icon', help_text='Icon (optional)', max_length=100, null=True, validators=[common.icons.validate_icon], verbose_name='Icon')),
                ('lft', models.PositiveIntegerField(editable=False)),
                ('rght', models.PositiveIntegerField(editable=False)),
                ('tree_id', models.PositiveIntegerField(db_index=True, editable=False)),
                ('level', models.PositiveIntegerField(editable=False)),
            ],
            options={
                'verbose_name': 'Part Category',
                'verbose_name_plural': 'Part Categories',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PartTestTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('test_name', models.CharField(help_text='Enter a name for the test', max_length=100, verbose_name='Test Name')),
                ('key', models.CharField(blank=True, help_text='Simplified key for the test', max_length=100, verbose_name='Test Key')),
                ('description', models.CharField(help_text='Enter description for this test', max_length=100, null=True, verbose_name='Test Description')),
                ('enabled', models.BooleanField(default=True, help_text='Is this test enabled?', verbose_name='Enabled')),
                ('required', models.BooleanField(default=True, help_text='Is this test required to pass?', verbose_name='Required')),
                ('requires_value', models.BooleanField(default=False, help_text='Does this test require a value when adding a test result?', verbose_name='Requires Value')),
                ('requires_attachment', models.BooleanField(default=False, help_text='Does this test require a file attachment when adding a test result?', verbose_name='Requires Attachment')),
                ('choices', models.CharField(blank=True, help_text='Valid choices for this test (comma-separated)', max_length=5000, verbose_name='Choices')),
                ('part', models.ForeignKey(limit_choices_to={'testable': True}, on_delete=django.db.models.deletion.CASCADE, related_name='test_templates', to='part.part', verbose_name='Part')),
            ],
            options={
                'verbose_name': 'Part Test Template',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PartStocktakeReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(auto_now_add=True, verbose_name='Date')),
                ('report', models.FileField(help_text='Stocktake report file (generated internally)', upload_to=part.models.save_stocktake_report, verbose_name='Report')),
                ('part_count', models.IntegerField(default=0, help_text='Number of parts covered by stocktake', verbose_name='Part Count')),
                ('user', models.ForeignKey(blank=True, help_text='User who requested this stocktake report', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='stocktake_reports', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='PartStocktake',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_count', models.IntegerField(default=1, help_text='Number of individual stock entries at time of stocktake', verbose_name='Item Count')),
                ('quantity', models.DecimalField(decimal_places=5, help_text='Total available stock at time of stocktake', max_digits=19, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quantity')),
                ('date', models.DateField(auto_now_add=True, help_text='Date stocktake was performed', verbose_name='Date')),
                ('note', models.CharField(blank=True, help_text='Additional notes', max_length=250, verbose_name='Notes')),
                ('cost_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('cost_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Estimated minimum cost of stock on hand', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Stock Cost')),
                ('cost_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('cost_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Estimated maximum cost of stock on hand', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Stock Cost')),
                ('part', models.ForeignKey(help_text='Part for stocktake', on_delete=django.db.models.deletion.CASCADE, related_name='stocktakes', to='part.part', verbose_name='Part')),
                ('user', models.ForeignKey(blank=True, help_text='User who performed this stocktake', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='part_stocktakes', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='PartStar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starred_users', to='part.part', verbose_name='Part')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starred_parts', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='PartSellPriceBreak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', null=True, verbose_name='Updated')),
                ('quantity', InvenTree.fields.RoundingDecimalField(decimal_places=5, default=1, help_text='Price break quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('price_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('price', InvenTree.fields.InvenTreeModelMoneyField(currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Unit price at specified quantity', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Price')),
                ('part', models.ForeignKey(limit_choices_to={'salable': True}, on_delete=django.db.models.deletion.CASCADE, related_name='salepricebreaks', to='part.part', verbose_name='Part')),
            ],
            options={
                'verbose_name': 'Part Sale Price Break',
            },
        ),
        migrations.CreateModel(
            name='PartRelated',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('note', models.CharField(blank=True, help_text='Note for this relationship', max_length=500, verbose_name='Note')),
                ('part_1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_parts_1', to='part.part', verbose_name='Part 1')),
                ('part_2', models.ForeignKey(help_text='Select Related Part', on_delete=django.db.models.deletion.CASCADE, related_name='related_parts_2', to='part.part', verbose_name='Part 2')),
            ],
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PartPricing',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', null=True, verbose_name='Updated')),
                ('currency', models.CharField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default=common.currency.currency_code_default, help_text='Currency used to cache pricing calculations', max_length=10, verbose_name='Currency')),
                ('scheduled_for_update', models.BooleanField(default=False)),
                ('bom_cost_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('bom_cost_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Minimum cost of component parts', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum BOM Cost')),
                ('bom_cost_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('bom_cost_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Maximum cost of component parts', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum BOM Cost')),
                ('purchase_cost_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('purchase_cost_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Minimum historical purchase cost', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Purchase Cost')),
                ('purchase_cost_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('purchase_cost_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Maximum historical purchase cost', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Purchase Cost')),
                ('internal_cost_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('internal_cost_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Minimum cost based on internal price breaks', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Internal Price')),
                ('internal_cost_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('internal_cost_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Maximum cost based on internal price breaks', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Internal Price')),
                ('supplier_price_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('supplier_price_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Minimum price of part from external suppliers', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Supplier Price')),
                ('supplier_price_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('supplier_price_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Maximum price of part from external suppliers', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Supplier Price')),
                ('variant_cost_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('variant_cost_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Calculated minimum cost of variant parts', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Variant Cost')),
                ('variant_cost_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('variant_cost_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Calculated maximum cost of variant parts', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Variant Cost')),
                ('override_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('override_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Override minimum cost', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Cost')),
                ('override_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('override_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Override maximum cost', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Cost')),
                ('overall_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('overall_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Calculated overall minimum cost', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Cost')),
                ('overall_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('overall_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Calculated overall maximum cost', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Cost')),
                ('sale_price_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('sale_price_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Minimum sale price based on price breaks', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Sale Price')),
                ('sale_price_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('sale_price_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Maximum sale price based on price breaks', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Sale Price')),
                ('sale_history_min_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('sale_history_min', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Minimum historical sale price', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Minimum Sale Cost')),
                ('sale_history_max_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('sale_history_max', InvenTree.fields.InvenTreeModelMoneyField(blank=True, currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Maximum historical sale price', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Maximum Sale Cost')),
                ('part', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='pricing_data', to='part.part', verbose_name='Part')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='PartParameterTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('name', models.CharField(help_text='Parameter Name', max_length=100, unique=True, verbose_name='Name')),
                ('units', models.CharField(blank=True, help_text='Physical units for this parameter', max_length=25, validators=[InvenTree.validators.validate_physical_units], verbose_name='Units')),
                ('description', models.CharField(blank=True, help_text='Parameter description', max_length=250, verbose_name='Description')),
                ('checkbox', models.BooleanField(default=False, help_text='Is this parameter a checkbox?', verbose_name='Checkbox')),
                ('choices', models.CharField(blank=True, help_text='Valid choices for this parameter (comma-separated)', max_length=5000, verbose_name='Choices')),
                ('selectionlist', models.ForeignKey(blank=True, help_text='Selection list for this parameter', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='parameter_templates', to='common.selectionlist', verbose_name='Selection List')),
            ],
            options={
                'verbose_name': 'Part Parameter Template',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PartParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('data', models.CharField(help_text='Parameter Value', max_length=500, validators=[django.core.validators.MinLengthValidator(1)], verbose_name='Data')),
                ('data_numeric', models.FloatField(blank=True, default=None, null=True)),
                ('part', models.ForeignKey(help_text='Parent Part', on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='part.part', verbose_name='Part')),
                ('template', models.ForeignKey(help_text='Parameter Template', on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='part.partparametertemplate', verbose_name='Template')),
            ],
            options={
                'verbose_name': 'Part Parameter',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='PartInternalPriceBreak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', null=True, verbose_name='Updated')),
                ('quantity', InvenTree.fields.RoundingDecimalField(decimal_places=5, default=1, help_text='Price break quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('price_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('price', InvenTree.fields.InvenTreeModelMoneyField(currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Unit price at specified quantity', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Price')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='internalpricebreaks', to='part.part', verbose_name='Part')),
            ],
        ),
        migrations.CreateModel(
            name='PartCategoryStar',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starred_users', to='part.partcategory', verbose_name='Category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='starred_categories', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='PartCategoryParameterTemplate',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('default_value', models.CharField(blank=True, help_text='Default Parameter Value', max_length=500, verbose_name='Default Value')),
                ('category', models.ForeignKey(help_text='Part Category', on_delete=django.db.models.deletion.CASCADE, related_name='parameter_templates', to='part.partcategory', verbose_name='Category')),
                ('parameter_template', models.ForeignKey(help_text='Parameter Template', on_delete=django.db.models.deletion.CASCADE, related_name='part_categories', to='part.partparametertemplate', verbose_name='Parameter Template')),
            ],
            options={
                'verbose_name': 'Part Category Parameter Template',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
    ]
