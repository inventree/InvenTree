# Generated by Django 4.2.17 on 2025-06-24 20:44

import InvenTree.fields
import InvenTree.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields

import logging
import sys

from moneyed import CURRENCIES
from django.db import migrations, connection
from company.models import SupplierPriceBreak


logger = logging.getLogger('inventree')


def migrate_currencies(apps, schema_editor):
    """
    Migrate from the 'old' method of handling currencies,
    to the new method which uses the django-money library.

    Previously, we created a custom Currency model,
    which was very simplistic.

    Here we will attempt to map each existing "currency" reference
    for the SupplierPriceBreak model, to a new django-money compatible currency.
    """

    logger.debug("Updating currency references for SupplierPriceBreak model...")

    # A list of available currency codes
    currency_codes = CURRENCIES.keys()

    cursor = connection.cursor()

    # The 'suffix' field denotes the currency code
    response = cursor.execute('SELECT id, suffix, description from common_currency;')

    results = cursor.fetchall()

    remap = {}

    for index, row in enumerate(results):
        pk, suffix, description = row

        suffix = suffix.strip().upper()

        if suffix not in currency_codes:  # pragma: no cover
            logger.warning(f"Missing suffix: '{suffix}'")

            while suffix not in currency_codes:
                # Ask the user to input a valid currency
                print(f"Could not find a valid currency matching '{suffix}'.")
                print("Please enter a valid currency code")
                suffix = str(input("> ")).strip()

        if pk not in remap.keys():
            remap[pk] = suffix

    # Now iterate through each SupplierPriceBreak and update the rows
    response = cursor.execute('SELECT id, cost, currency_id, price, price_currency from part_supplierpricebreak;')

    results = cursor.fetchall()

    count = 0

    for index, row in enumerate(results):
        pk, cost, currency_id, price, price_currency = row

        # Copy the 'cost' field across to the 'price' field
        response = cursor.execute(f'UPDATE part_supplierpricebreak set price={cost} where id={pk};')

        # Extract the updated currency code
        currency_code = remap.get(currency_id, 'USD')

        # Update the currency code
        response = cursor.execute(f"UPDATE part_supplierpricebreak set price_currency= '{currency_code}' where id={pk};")

        count += 1

    if count > 0:
        logger.info(f"Updated {count} SupplierPriceBreak rows")

def reverse_currencies(apps, schema_editor):  # pragma: no cover
    """
    Reverse the "update" process.

    Here we may be in the situation that the legacy "Currency" table is empty,
    and so we have to re-populate it based on the new price_currency codes.
    """

    print("Reversing currency migration...")

    cursor = connection.cursor()

    # Extract a list of currency codes which are in use
    response = cursor.execute(f'SELECT id, price, price_currency from part_supplierpricebreak;')

    results = cursor.fetchall()

    codes_in_use = set()

    for index, row in enumerate(results):
        pk, price, code = row

        codes_in_use.add(code)

        # Copy the 'price' field back into the 'cost' field
        response = cursor.execute(f'UPDATE part_supplierpricebreak set cost={price} where id={pk};')

    # Keep a dict of which currency objects map to which code
    code_map = {}

    # For each currency code in use, check if we have a matching Currency object
    for code in codes_in_use:
        response = cursor.execute(f"SELECT id, suffix from common_currency where suffix='{code}';")
        row = cursor.fetchone()

        if row is not None:
            # A match exists!
            pk, suffix = row
            code_map[suffix] = pk
        else:
            # No currency object exists!
            description = CURRENCIES[code]

            # Create a new object in the database
            print(f"Creating new Currency object for {code}")

            # Construct a query to create a new Currency object
            query = f'INSERT into common_currency (symbol, suffix, description, value, base) VALUES ("$", "{code}", "{description}", 1.0, False);'

            response = cursor.execute(query)

            code_map[code] = cursor.lastrowid

    # Ok, now we know how each suffix maps to a Currency object
    for suffix in code_map.keys():
        pk = code_map[suffix]

        # Update the table to point to the Currency objects
        print(f"Currency {suffix} -> pk {pk}")

        response = cursor.execute(f"UPDATE part_supplierpricebreak set currency_id={pk} where price_currency='{suffix}';")


def reverse_empty_email(apps, schema_editor):  # pragma: no cover
    Company = apps.get_model('company', 'Company')
    for company in Company.objects.all():
        if company.email == None:
            company.email = ''
            company.save()


def make_empty_email_field_null(apps, schema_editor):
    Company = apps.get_model('company', 'Company')
    for company in Company.objects.all():
        if company.email == '':
            company.email = None
            company.save()

class Migration(migrations.Migration):

    replaces = [('company', '0022_auto_20200613_1045'), ('company', '0023_auto_20200808_0715'), ('company', '0024_unique_name_email_constraint'), ('company', '0025_auto_20201110_1001'), ('company', '0026_auto_20201110_1011'), ('company', '0027_remove_supplierpricebreak_currency'), ('company', '0028_remove_supplierpricebreak_cost'), ('company', '0029_company_currency'), ('company', '0030_auto_20201112_1112')]

    dependencies = [
        ('part', '0045_auto_20200605_0932'),
        ('company', '0021_remove_supplierpart_manufacturer_name'),
        ('common', '0004_inventreesetting'),
    ]

    operations = [
        migrations.AlterField(
            model_name='company',
            name='address',
            field=models.CharField(blank=True, help_text='Company address', max_length=200, verbose_name='Address'),
        ),
        migrations.AlterField(
            model_name='company',
            name='contact',
            field=models.CharField(blank=True, help_text='Point of contact', max_length=100, verbose_name='Contact'),
        ),
        migrations.AlterField(
            model_name='company',
            name='description',
            field=models.CharField(help_text='Description of the company', max_length=500, verbose_name='Company description'),
        ),
        migrations.AlterField(
            model_name='company',
            name='email',
            field=models.EmailField(blank=True, help_text='Contact email address', max_length=254, verbose_name='Email'),
        ),
        migrations.AlterField(
            model_name='company',
            name='name',
            field=models.CharField(help_text='Company name', max_length=100, unique=True, verbose_name='Company name'),
        ),
        migrations.AlterField(
            model_name='company',
            name='phone',
            field=models.CharField(blank=True, help_text='Contact phone number', max_length=50, verbose_name='Phone number'),
        ),
        migrations.AlterField(
            model_name='company',
            name='website',
            field=models.URLField(blank=True, help_text='Company website URL', verbose_name='Website'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='part',
            field=models.ForeignKey(help_text='Select part', limit_choices_to={'is_template': False, 'purchaseable': True}, on_delete=django.db.models.deletion.CASCADE, related_name='supplier_parts', to='part.part', verbose_name='Base Part'),
        ),
        migrations.AlterModelOptions(
            name='company',
            options={'ordering': ['name'], 'verbose_name': 'Company'},
        ),
        migrations.AlterField(
            model_name='company',
            name='email',
            field=models.EmailField(blank=True, help_text='Contact email address', max_length=254, null=True, verbose_name='Email'),
        ),
        migrations.RunPython(
            code=make_empty_email_field_null,
            reverse_code=reverse_empty_email,
        ),
        migrations.AlterField(
            model_name='company',
            name='name',
            field=models.CharField(help_text='Company name', max_length=100, verbose_name='Company name'),
        ),
        migrations.AddConstraint(
            model_name='company',
            constraint=models.UniqueConstraint(fields=('name', 'email'), name='unique_name_email_pair'),
        ),
        migrations.AddField(
            model_name='supplierpricebreak',
            name='price',
            field=djmoney.models.fields.MoneyField(decimal_places=4, default_currency='USD', help_text='Unit price at specified quantity', max_digits=19, null=True, verbose_name='Price'),
        ),
        migrations.AddField(
            model_name='supplierpricebreak',
            name='price_currency',
            field=djmoney.models.fields.CurrencyField(choices=[('AUD', 'AUD - Australian Dollar'), ('CAD', 'CAD - Canadian Dollar'), ('CNY', 'CNY - Chinese Yuan'), ('EUR', 'EUR - Euro'), ('GBP', 'GBP - British Pound'), ('JPY', 'JPY - Japanese Yen'), ('NZD', 'NZD - New Zealand Dollar'), ('USD', 'USD - US Dollar')], default='USD', editable=False, max_length=3),
        ),
        migrations.RunPython(
            code=migrate_currencies,
            reverse_code=reverse_currencies,
        ),
        migrations.RemoveField(
            model_name='supplierpricebreak',
            name='currency',
        ),
        migrations.RemoveField(
            model_name='supplierpricebreak',
            name='cost',
        ),
        migrations.AddField(
            model_name='company',
            name='currency',
            field=models.CharField(blank=True, help_text='Default currency used for this company', max_length=3, validators=[InvenTree.validators.validate_currency_code], verbose_name='Currency'),
        ),
        migrations.AlterField(
            model_name='supplierpricebreak',
            name='quantity',
            field=InvenTree.fields.RoundingDecimalField(decimal_places=5, default=1, help_text='Price break quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity'),
        ),
    ]
