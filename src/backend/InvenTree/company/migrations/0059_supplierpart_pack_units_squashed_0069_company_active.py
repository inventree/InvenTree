# Generated by Django 4.2.17 on 2025-06-24 20:48

import InvenTree.fields
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
from django.db import migrations

from InvenTree.helpers import normalize


def update_supplier_part_units(apps, schema_editor):
    """Migrate existing supplier part units to new field"""

    SupplierPart = apps.get_model('company', 'SupplierPart')

    supplier_parts = SupplierPart.objects.all()

    for sp in supplier_parts:
        pack_size = normalize(sp.pack_size)
        sp.pack_quantity = str(pack_size)
        sp.pack_quantity_native = pack_size
        sp.save()

    if supplier_parts.count() > 0:
        print(f"Updated {supplier_parts.count()} supplier part units")


def reverse_pack_quantity(apps, schema_editor):
    """Reverse the migrations"""

    SupplierPart = apps.get_model('company', 'SupplierPart')

    supplier_parts = SupplierPart.objects.all()

    for sp in supplier_parts:
        sp.pack_size = sp.pack_quantity_native
        sp.save()

    if supplier_parts.count() > 0:
        print(f"Updated {supplier_parts.count()} supplier part units")

def move_address_to_new_model(apps, schema_editor):
    Company = apps.get_model('company', 'Company')
    Address = apps.get_model('company', 'Address')
    for company in Company.objects.all():
        if company.address != '':
            # Address field might exceed length of new model fields
            l1 = company.address[:50]
            l2 = company.address[50:100]
            Address.objects.create(company=company,
                                   title="Primary",
                                   primary=True,
                                   line1=l1,
                                   line2=l2)
            company.address = ''
            company.save()

def revert_address_move(apps, schema_editor):
    Address = apps.get_model('company', 'Address')
    for address in Address.objects.all():
        address.company.address = f'{address.line1}{address.line2}'
        address.company.save()
        address.delete()


class Migration(migrations.Migration):

    replaces = [('company', '0059_supplierpart_pack_units'), ('company', '0060_auto_20230519_0344'), ('company', '0061_remove_supplierpart_pack_size'), ('company', '0062_contact_metadata'), ('company', '0063_auto_20230502_1956'), ('company', '0064_move_address_field_to_address_model'), ('company', '0065_remove_company_address'), ('company', '0066_auto_20230616_2059'), ('company', '0067_alter_supplierpricebreak_price_currency'), ('company', '0068_auto_20231120_1108'), ('company', '0069_company_active')]

    dependencies = [
        ('part', '0111_auto_20230521_1350'),
        ('company', '0058_auto_20230515_0004'),
        ('stock', '0094_auto_20230220_0025'),
    ]

    operations = [
        migrations.AddField(
            model_name='supplierpart',
            name='pack_quantity',
            field=models.CharField(blank=True, help_text='Total quantity supplied in a single pack. Leave empty for single items.', max_length=25, verbose_name='Pack Quantity'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='pack_quantity_native',
            field=InvenTree.fields.RoundingDecimalField(decimal_places=10, default=1, max_digits=20, null=True),
        ),
        migrations.RunPython(
            code=update_supplier_part_units,
            reverse_code=reverse_pack_quantity,
        ),
        migrations.RemoveField(
            model_name='supplierpart',
            name='pack_size',
        ),
        migrations.AddField(
            model_name='contact',
            name='metadata',
            field=models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata'),
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title describing the address entry', max_length=100, verbose_name='Address title')),
                ('primary', models.BooleanField(default=False, help_text='Set as primary address', verbose_name='Primary address')),
                ('line1', models.CharField(blank=True, help_text='Address line 1', max_length=50, verbose_name='Line 1')),
                ('line2', models.CharField(blank=True, help_text='Address line 2', max_length=50, verbose_name='Line 2')),
                ('postal_code', models.CharField(blank=True, help_text='Postal code', max_length=10, verbose_name='Postal code')),
                ('postal_city', models.CharField(blank=True, help_text='Postal code city', max_length=50, verbose_name='City')),
                ('province', models.CharField(blank=True, help_text='State or province', max_length=50, verbose_name='State/Province')),
                ('country', models.CharField(blank=True, help_text='Address country', max_length=50, verbose_name='Country')),
                ('shipping_notes', models.CharField(blank=True, help_text='Notes for shipping courier', max_length=100, verbose_name='Courier shipping notes')),
                ('internal_shipping_notes', models.CharField(blank=True, help_text='Shipping notes for internal use', max_length=100, verbose_name='Internal shipping notes')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to address information (external)', max_length=2000, verbose_name='Link')),
                ('company', models.ForeignKey(help_text='Select company', on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='company.company', verbose_name='Company')),
            ],
        ),
        migrations.RunPython(
            code=move_address_to_new_model,
            reverse_code=revert_address_move,
        ),
        migrations.RemoveField(
            model_name='company',
            name='address',
        ),
        migrations.AlterModelOptions(
            name='address',
            options={'verbose_name': 'Address', 'verbose_name_plural': 'Addresses'},
        ),
        migrations.AlterField(
            model_name='address',
            name='postal_city',
            field=models.CharField(blank=True, help_text='Postal code city/region', max_length=50, verbose_name='City/Region'),
        ),
        migrations.AlterField(
            model_name='supplierpricebreak',
            name='price_currency',
            field=djmoney.models.fields.CurrencyField(choices=[], default='', editable=False, max_length=3, null=True),
        ),
        migrations.AddField(
            model_name='manufacturerpart',
            name='barcode_data',
            field=models.CharField(blank=True, help_text='Third party barcode data', max_length=500, verbose_name='Barcode Data'),
        ),
        migrations.AddField(
            model_name='manufacturerpart',
            name='barcode_hash',
            field=models.CharField(blank=True, help_text='Unique hash of barcode data', max_length=128, verbose_name='Barcode Hash'),
        ),
        migrations.AddField(
            model_name='company',
            name='active',
            field=models.BooleanField(default=True, help_text='Is this company active?', verbose_name='Active'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='active',
            field=models.BooleanField(default=True, help_text='Is this supplier part active?', verbose_name='Active'),
        ),
    ]
