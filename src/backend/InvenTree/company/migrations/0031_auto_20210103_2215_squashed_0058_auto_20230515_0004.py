# Generated by Django 4.2.17 on 2025-06-24 20:45

import InvenTree.fields
import InvenTree.validators
import common.currency
import company.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
import djmoney.models.validators
import stdimage.models
import taggit.managers
import InvenTree.fields
from django.db import migrations, models, transaction
import django.db.models.deletion
from django.db.utils import IntegrityError

def supplierpart_make_manufacturer_parts(apps, schema_editor):
    Part = apps.get_model('part', 'Part')
    ManufacturerPart = apps.get_model('company', 'ManufacturerPart')
    SupplierPart = apps.get_model('company', 'SupplierPart')

    supplier_parts = SupplierPart.objects.all()

    if supplier_parts:
        print(f'\nCreating ManufacturerPart Objects\n{"-"*10}')
        for supplier_part in supplier_parts:
            print(f'{supplier_part.supplier.name[:15].ljust(15)} | {supplier_part.SKU[:15].ljust(15)}\t', end='')

            if supplier_part.manufacturer_part:  # pragma: no cover
                print(f'[ERROR: MANUFACTURER PART ALREADY EXISTS]')
                continue

            part = supplier_part.part
            if not part:  # pragma: no cover
                print(f'[ERROR: SUPPLIER PART IS NOT CONNECTED TO PART]')
                continue

            manufacturer = supplier_part.manufacturer
            MPN = supplier_part.MPN
            link = supplier_part.link
            description = supplier_part.description

            if manufacturer or MPN:
                print(f' | {part.name[:15].ljust(15)}', end='')

                try:
                    print(f' | {manufacturer.name[:15].ljust(15)}', end='')
                except AttributeError:
                    print(f' | {"EMPTY MANUF".ljust(15)}', end='')

                try:
                    print(f' | {MPN[:15].ljust(15)}', end='')
                except TypeError:
                    print(f' | {"EMPTY MPN".ljust(15)}', end='')

                print('\t', end='')

                # Create ManufacturerPart
                manufacturer_part = ManufacturerPart(part=part, manufacturer=manufacturer, MPN=MPN, description=description, link=link)
                created = False
                try:
                    with transaction.atomic():
                        manufacturer_part.save()
                    created = True
                except IntegrityError:
                    manufacturer_part = ManufacturerPart.objects.get(part=part, manufacturer=manufacturer, MPN=MPN)

                # Link it to SupplierPart
                supplier_part.manufacturer_part = manufacturer_part
                supplier_part.save()

                if created:
                    print(f'[SUCCESS: MANUFACTURER PART CREATED]')
                else:
                    print(f'[IGNORED: MANUFACTURER PART ALREADY EXISTS]')
            else:
                print(f'[IGNORED: MISSING MANUFACTURER DATA]')

        print(f'{"-"*10}\nDone\n')

def supplierpart_populate_manufacturer_info(apps, schema_editor):  # pragma: no cover
    Part = apps.get_model('part', 'Part')
    ManufacturerPart = apps.get_model('company', 'ManufacturerPart')
    SupplierPart = apps.get_model('company', 'SupplierPart')

    supplier_parts = SupplierPart.objects.all()

    if supplier_parts:
        print(f'\nSupplierPart: Populating Manufacturer Information\n{"-"*10}')
        for supplier_part in supplier_parts:
            print(f'{supplier_part.supplier.name[:15].ljust(15)} | {supplier_part.SKU[:15].ljust(15)}\t', end='')

            manufacturer_part = supplier_part.manufacturer_part

            if manufacturer_part:
                if manufacturer_part.manufacturer:
                    supplier_part.manufacturer = manufacturer_part.manufacturer

                if manufacturer_part.MPN:
                    supplier_part.MPN = manufacturer_part.MPN

                supplier_part.save()

                print(f'[SUCCESS: UPDATED MANUFACTURER INFO]')
            else:
                print(f'[IGNORED: NO MANUFACTURER PART]')

        print(f'{"-"*10}\nDone\n')



class Migration(migrations.Migration):

    replaces = [('company', '0031_auto_20210103_2215'), ('company', '0032_auto_20210403_1837'), ('company', '0033_auto_20210410_1528'), ('company', '0034_manufacturerpart'), ('company', '0035_supplierpart_update_1'), ('company', '0036_supplierpart_update_2'), ('company', '0037_supplierpart_update_3'), ('company', '0038_manufacturerpartparameter'), ('company', '0039_auto_20210701_0509'), ('company', '0040_alter_company_currency'), ('company', '0041_alter_company_options'), ('company', '0042_supplierpricebreak_updated'), ('company', '0043_manufacturerpartattachment'), ('company', '0044_auto_20220607_2204'), ('company', '0045_alter_company_notes'), ('company', '0046_alter_company_image'), ('company', '0047_supplierpart_pack_size'), ('company', '0048_auto_20220913_0312'), ('company', '0049_company_metadata'), ('company', '0050_alter_company_website'), ('company', '0051_alter_supplierpricebreak_price'), ('company', '0052_alter_supplierpricebreak_updated'), ('company', '0053_supplierpart_updated'), ('company', '0054_companyattachment'), ('company', '0055_auto_20230317_0816'), ('company', '0056_alter_company_notes'), ('company', '0057_auto_20230427_2033'), ('company', '0058_auto_20230515_0004')]

    dependencies = [
        ('company', '0030_auto_20201112_1112'),
        ('part', '0060_merge_20201112_1722'),
        ('common', '0004_inventreesetting'),
        ('taggit', '0005_auto_20220424_2025'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.AlterField(
            model_name='supplierpart',
            name='MPN',
            field=models.CharField(blank=True, help_text='Manufacturer part number', max_length=100, null=True, verbose_name='MPN'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='SKU',
            field=models.CharField(help_text='Supplier stock keeping unit', max_length=100, verbose_name='SKU'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='description',
            field=models.CharField(blank=True, help_text='Supplier part description', max_length=250, null=True, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='link',
            field=InvenTree.fields.InvenTreeURLField(blank=True, help_text='URL for external supplier part link', max_length=2000, null=True, verbose_name='Link'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='manufacturer',
            field=models.ForeignKey(blank=True, help_text='Select manufacturer', limit_choices_to={'is_manufacturer': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='manufactured_parts', to='company.company', verbose_name='Manufacturer'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='note',
            field=models.CharField(blank=True, help_text='Notes', max_length=100, null=True, verbose_name='Note'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='packaging',
            field=models.CharField(blank=True, help_text='Part packaging', max_length=50, null=True),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='part',
            field=models.ForeignKey(help_text='Select part', limit_choices_to={'purchaseable': True}, on_delete=django.db.models.deletion.CASCADE, related_name='supplier_parts', to='part.part', verbose_name='Base Part'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='supplier',
            field=models.ForeignKey(help_text='Select supplier', limit_choices_to={'is_supplier': True}, on_delete=django.db.models.deletion.CASCADE, related_name='supplied_parts', to='company.company', verbose_name='Supplier'),
        ),
        migrations.AlterField(
            model_name='company',
            name='image',
            field=stdimage.models.StdImageField(blank=True, force_min_size=False, null=True, upload_to=company.models.rename_company_image, variations={}, verbose_name='Image'),
        ),
        migrations.AlterField(
            model_name='company',
            name='is_customer',
            field=models.BooleanField(default=False, help_text='Do you sell items to this company?', verbose_name='Is customer'),
        ),
        migrations.AlterField(
            model_name='company',
            name='is_manufacturer',
            field=models.BooleanField(default=False, help_text='Does this company manufacture parts?', verbose_name='Is manufacturer'),
        ),
        migrations.AlterField(
            model_name='company',
            name='is_supplier',
            field=models.BooleanField(default=True, help_text='Do you purchase items from this company?', verbose_name='Is supplier'),
        ),
        migrations.AlterField(
            model_name='company',
            name='link',
            field=InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to external company information', max_length=2000, verbose_name='Link'),
        ),
        migrations.AlterField(
            model_name='company',
            name='notes',
            field=models.TextField(blank=True, verbose_name='Notes'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='base_cost',
            field=models.DecimalField(decimal_places=3, default=0, help_text='Minimum charge (e.g. stocking fee)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='base cost'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='multiple',
            field=models.PositiveIntegerField(default=1, help_text='Order multiple', validators=[django.core.validators.MinValueValidator(1)], verbose_name='multiple'),
        ),
        migrations.AlterField(
            model_name='supplierpart',
            name='packaging',
            field=models.CharField(blank=True, help_text='Part packaging', max_length=50, null=True, verbose_name='Packaging'),
        ),
        migrations.AlterField(
            model_name='supplierpricebreak',
            name='part',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricebreaks', to='company.supplierpart', verbose_name='Part'),
        ),
        migrations.AlterField(
            model_name='company',
            name='description',
            field=models.CharField(blank=True, help_text='Description of the company', max_length=500, verbose_name='Company description'),
        ),
        migrations.CreateModel(
            name='ManufacturerPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('MPN', models.CharField(help_text='Manufacturer Part Number', max_length=100, null=True, verbose_name='MPN')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='URL for external manufacturer part link', max_length=2000, null=True, verbose_name='Link')),
                ('description', models.CharField(blank=True, help_text='Manufacturer part description', max_length=250, null=True, verbose_name='Description')),
                ('manufacturer', models.ForeignKey(help_text='Select manufacturer', limit_choices_to={'is_manufacturer': True}, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='manufactured_parts', to='company.company', verbose_name='Manufacturer')),
                ('part', models.ForeignKey(help_text='Select part', limit_choices_to={'purchaseable': True}, on_delete=django.db.models.deletion.CASCADE, related_name='manufacturer_parts', to='part.part', verbose_name='Base Part')),
            ],
            options={
                'unique_together': {('part', 'manufacturer', 'MPN')},
                'verbose_name': 'Manufacturer Part',
            },
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='manufacturer_part',
            field=models.ForeignKey(blank=True, help_text='Select manufacturer part', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supplier_parts', to='company.manufacturerpart', verbose_name='Manufacturer Part'),
        ),
        migrations.RunPython(
            code=supplierpart_make_manufacturer_parts,
            reverse_code=supplierpart_populate_manufacturer_info,
        ),
        migrations.RemoveField(
            model_name='supplierpart',
            name='MPN',
        ),
        migrations.RemoveField(
            model_name='supplierpart',
            name='manufacturer',
        ),
        migrations.CreateModel(
            name='ManufacturerPartParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Parameter name', max_length=500, verbose_name='Name')),
                ('value', models.CharField(help_text='Parameter value', max_length=500, verbose_name='Value')),
                ('units', models.CharField(blank=True, help_text='Parameter units', max_length=64, null=True, verbose_name='Units')),
                ('manufacturer_part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='parameters', to='company.manufacturerpart', verbose_name='Manufacturer Part')),
            ],
            options={
                'verbose_name': 'Manufacturer Part Parameter',
                'unique_together': {('manufacturer_part', 'name')},
            },
        ),
        migrations.AlterField(
            model_name='supplierpricebreak',
            name='price',
            field=InvenTree.fields.InvenTreeModelMoneyField(currency_choices=[], decimal_places=4, default_currency='', help_text='Unit price at specified quantity', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Price'),
        ),
        migrations.AlterField(
            model_name='supplierpricebreak',
            name='price_currency',
            field=djmoney.models.fields.CurrencyField(choices=[], default='', editable=False, max_length=3),
        ),
        migrations.AlterField(
            model_name='company',
            name='currency',
            field=models.CharField(blank=True, default=common.currency.currency_code_default, help_text='Default currency used for this company', max_length=3, validators=[InvenTree.validators.validate_currency_code], verbose_name='Currency'),
        ),
        migrations.AlterModelOptions(
            name='company',
            options={'ordering': ['name'], 'verbose_name': 'Company', 'verbose_name_plural': 'Companies'},
        ),
        migrations.CreateModel(
            name='ManufacturerPartAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment', models.FileField(blank=True, help_text='Select file to attach', null=True, upload_to='attachments', verbose_name='Attachment')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to external URL', max_length=2000, null=True, verbose_name='Link')),
                ('comment', models.CharField(blank=True, help_text='File comment', max_length=100, verbose_name='Comment')),
                ('upload_date', models.DateField(auto_now_add=True, null=True, verbose_name='upload date')),
                ('manufacturer_part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='company.manufacturerpart', verbose_name='Manufacturer Part')),
                ('user', models.ForeignKey(blank=True, help_text='User', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='availability_updated',
            field=models.DateTimeField(blank=True, help_text='Date of last update of availability data', null=True, verbose_name='Availability Updated'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='available',
            field=models.DecimalField(decimal_places=3, default=0, help_text='Quantity available from supplier', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Available'),
        ),
        migrations.AlterField(
            model_name='company',
            name='notes',
            field=InvenTree.fields.InvenTreeNotesField(blank=True, help_text='Company Notes', max_length=50000, null=True, verbose_name='Notes'),
        ),
        migrations.AlterField(
            model_name='company',
            name='image',
            field=stdimage.models.StdImageField(blank=True, force_min_size=False, null=True, upload_to=company.models.rename_company_image, variations={'preview': (256, 256), 'thumbnail': (128, 128)}, verbose_name='Image'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='pack_size',
            field=InvenTree.fields.RoundingDecimalField(decimal_places=5, default=1, help_text='Unit quantity supplied in a single pack', max_digits=15, validators=[django.core.validators.MinValueValidator(0.001)], verbose_name='Pack Quantity'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='barcode_data',
            field=models.CharField(blank=True, help_text='Third party barcode data', max_length=500, verbose_name='Barcode Data'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='barcode_hash',
            field=models.CharField(blank=True, help_text='Unique hash of barcode data', max_length=128, verbose_name='Barcode Hash'),
        ),
        migrations.AddField(
            model_name='company',
            name='metadata',
            field=models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata'),
        ),
        migrations.AlterField(
            model_name='company',
            name='website',
            field=InvenTree.fields.InvenTreeURLField(blank=True, help_text='Company website URL', max_length=2000, verbose_name='Website'),
        ),
        migrations.AlterField(
            model_name='supplierpricebreak',
            name='price',
            field=InvenTree.fields.InvenTreeModelMoneyField(currency_choices=[], decimal_places=6, default_currency='', help_text='Unit price at specified quantity', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Price'),
        ),
        migrations.AddField(
            model_name='supplierpricebreak',
            name='updated',
            field=models.DateTimeField(auto_now=True, help_text='Timestamp of last update', null=True, verbose_name='Updated'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='updated',
            field=models.DateTimeField(auto_now=True, help_text='Timestamp of last update', null=True, verbose_name='Updated'),
        ),
        migrations.CreateModel(
            name='CompanyAttachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('attachment', models.FileField(blank=True, help_text='Select file to attach', null=True, upload_to='attachments', verbose_name='Attachment')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to external URL', max_length=2000, null=True, verbose_name='Link')),
                ('comment', models.CharField(blank=True, help_text='File comment', max_length=100, verbose_name='Comment')),
                ('upload_date', models.DateField(auto_now_add=True, null=True, verbose_name='upload date')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attachments', to='company.company', verbose_name='Company')),
                ('user', models.ForeignKey(blank=True, help_text='User', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='manufacturerpart',
            name='metadata',
            field=models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='metadata',
            field=models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata'),
        ),
        migrations.AlterField(
            model_name='company',
            name='notes',
            field=InvenTree.fields.InvenTreeNotesField(blank=True, help_text='Markdown notes (optional)', max_length=50000, null=True, verbose_name='Notes'),
        ),
        migrations.AddField(
            model_name='manufacturerpart',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='supplierpart',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
    ]
