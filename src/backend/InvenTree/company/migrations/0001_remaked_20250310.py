# Generated by Django 4.2.19 on 2025-03-10 22:44

import InvenTree.fields
import InvenTree.models
import InvenTree.validators
import common.currency
import company.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djmoney.models.fields
import djmoney.models.validators
import stdimage.models


class Migration(migrations.Migration):

    replaces = [('company', '0001_initial'), ('company', '0002_auto_20190520_2204'), ('company', '0003_remove_supplierpart_minimum'), ('company', '0004_auto_20190525_2354'), ('company', '0005_auto_20190525_2356'), ('company', '0006_supplierpricebreak_currency'), ('company', '0007_remove_supplierpart_lead_time'), ('company', '0008_auto_20190913_1407'), ('company', '0009_auto_20191118_2323'), ('company', '0010_auto_20200201_1231'), ('company', '0011_auto_20200318_1114'), ('company', '0012_auto_20200318_1114'), ('company', '0013_auto_20200406_0131'), ('company', '0014_auto_20200407_0116'), ('company', '0015_company_is_manufacturer'), ('company', '0016_auto_20200412_2330'), ('company', '0017_auto_20200413_0320'), ('company', '0018_supplierpart_manufacturer'), ('company', '0019_auto_20200413_0642'), ('company', '0020_auto_20200413_0839'), ('company', '0021_remove_supplierpart_manufacturer_name'), ('company', '0022_auto_20200613_1045'), ('company', '0023_auto_20200808_0715'), ('company', '0024_unique_name_email_constraint'), ('company', '0025_auto_20201110_1001'), ('company', '0026_auto_20201110_1011'), ('company', '0027_remove_supplierpricebreak_currency'), ('company', '0028_remove_supplierpricebreak_cost'), ('company', '0029_company_currency'), ('company', '0030_auto_20201112_1112'), ('company', '0031_auto_20210103_2215'), ('company', '0032_auto_20210403_1837'), ('company', '0033_auto_20210410_1528'), ('company', '0034_manufacturerpart'), ('company', '0035_supplierpart_update_1'), ('company', '0036_supplierpart_update_2'), ('company', '0037_supplierpart_update_3'), ('company', '0038_manufacturerpartparameter'), ('company', '0039_auto_20210701_0509'), ('company', '0040_alter_company_currency'), ('company', '0041_alter_company_options'), ('company', '0042_supplierpricebreak_updated'), ('company', '0043_manufacturerpartattachment'), ('company', '0044_auto_20220607_2204'), ('company', '0045_alter_company_notes'), ('company', '0046_alter_company_image'), ('company', '0047_supplierpart_pack_size'), ('company', '0048_auto_20220913_0312'), ('company', '0049_company_metadata'), ('company', '0050_alter_company_website'), ('company', '0051_alter_supplierpricebreak_price'), ('company', '0052_alter_supplierpricebreak_updated'), ('company', '0053_supplierpart_updated'), ('company', '0054_companyattachment'), ('company', '0055_auto_20230317_0816'), ('company', '0056_alter_company_notes'), ('company', '0057_auto_20230427_2033'), ('company', '0058_auto_20230515_0004'), ('company', '0059_supplierpart_pack_units'), ('company', '0060_auto_20230519_0344'), ('company', '0061_remove_supplierpart_pack_size'), ('company', '0062_contact_metadata'), ('company', '0063_auto_20230502_1956'), ('company', '0064_move_address_field_to_address_model'), ('company', '0065_remove_company_address'), ('company', '0066_auto_20230616_2059'), ('company', '0067_alter_supplierpricebreak_price_currency'), ('company', '0068_auto_20231120_1108'), ('company', '0069_company_active'), ('company', '0070_remove_manufacturerpartattachment_manufacturer_part_and_more'), ('company', '0071_manufacturerpart_notes_supplierpart_notes'), ('company', '0072_auto_20250221_1236'), ('company', '0073_alter_address_link_alter_company_link_and_more')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(help_text='Title describing the address entry', max_length=100, verbose_name='Address title')),
                ('primary', models.BooleanField(default=False, help_text='Set as primary address', verbose_name='Primary address')),
                ('line1', models.CharField(blank=True, help_text='Address line 1', max_length=50, verbose_name='Line 1')),
                ('line2', models.CharField(blank=True, help_text='Address line 2', max_length=50, verbose_name='Line 2')),
                ('postal_code', models.CharField(blank=True, help_text='Postal code', max_length=10, verbose_name='Postal code')),
                ('postal_city', models.CharField(blank=True, help_text='Postal code city/region', max_length=50, verbose_name='City/Region')),
                ('province', models.CharField(blank=True, help_text='State or province', max_length=50, verbose_name='State/Province')),
                ('country', models.CharField(blank=True, help_text='Address country', max_length=50, verbose_name='Country')),
                ('shipping_notes', models.CharField(blank=True, help_text='Notes for shipping courier', max_length=100, verbose_name='Courier shipping notes')),
                ('internal_shipping_notes', models.CharField(blank=True, help_text='Shipping notes for internal use', max_length=100, verbose_name='Internal shipping notes')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to address information (external)', max_length=2000, verbose_name='Link')),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('notes', InvenTree.fields.InvenTreeNotesField(blank=True, help_text='Markdown notes (optional)', max_length=50000, null=True, verbose_name='Notes')),
                ('name', models.CharField(help_text='Company name', max_length=100, verbose_name='Company name')),
                ('description', models.CharField(blank=True, help_text='Description of the company', max_length=500, verbose_name='Company description')),
                ('website', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Company website URL', max_length=2000, verbose_name='Website')),
                ('phone', models.CharField(blank=True, help_text='Contact phone number', max_length=50, verbose_name='Phone number')),
                ('email', models.EmailField(blank=True, help_text='Contact email address', max_length=254, null=True, verbose_name='Email')),
                ('contact', models.CharField(blank=True, help_text='Point of contact', max_length=100, verbose_name='Contact')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to external company information', max_length=2000, verbose_name='Link')),
                ('image', stdimage.models.StdImageField(blank=True, force_min_size=False, null=True, upload_to=company.models.rename_company_image, variations={'preview': (256, 256), 'thumbnail': (128, 128)}, verbose_name='Image')),
                ('active', models.BooleanField(default=True, help_text='Is this company active?', verbose_name='Active')),
                ('is_customer', models.BooleanField(default=False, help_text='Do you sell items to this company?', verbose_name='Is customer')),
                ('is_supplier', models.BooleanField(default=True, help_text='Do you purchase items from this company?', verbose_name='Is supplier')),
                ('is_manufacturer', models.BooleanField(default=False, help_text='Does this company manufacture parts?', verbose_name='Is manufacturer')),
                ('currency', models.CharField(blank=True, default=common.currency.currency_code_default, help_text='Default currency used for this company', max_length=3, validators=[InvenTree.validators.validate_currency_code], verbose_name='Currency')),
            ],
            options={
                'verbose_name': 'Company',
                'verbose_name_plural': 'Companies',
                'ordering': ['name'],
            },
            bases=(InvenTree.models.InvenTreeAttachmentMixin, InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('name', models.CharField(max_length=100)),
                ('phone', models.CharField(blank=True, max_length=100)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('role', models.CharField(blank=True, max_length=100)),
            ],
            options={
                'verbose_name': 'Contact',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ManufacturerPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('notes', InvenTree.fields.InvenTreeNotesField(blank=True, help_text='Markdown notes (optional)', max_length=50000, null=True, verbose_name='Notes')),
                ('barcode_data', models.CharField(blank=True, help_text='Third party barcode data', max_length=500, verbose_name='Barcode Data')),
                ('barcode_hash', models.CharField(blank=True, help_text='Unique hash of barcode data', max_length=128, verbose_name='Barcode Hash')),
                ('MPN', models.CharField(help_text='Manufacturer Part Number', max_length=100, null=True, verbose_name='MPN')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='URL for external manufacturer part link', max_length=2000, null=True, verbose_name='Link')),
                ('description', models.CharField(blank=True, help_text='Manufacturer part description', max_length=250, null=True, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Manufacturer Part',
            },
            bases=(InvenTree.models.InvenTreeAttachmentMixin, InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ManufacturerPartParameter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Parameter name', max_length=500, verbose_name='Name')),
                ('value', models.CharField(help_text='Parameter value', max_length=500, verbose_name='Value')),
                ('units', models.CharField(blank=True, help_text='Parameter units', max_length=64, null=True, verbose_name='Units')),
            ],
            options={
                'verbose_name': 'Manufacturer Part Parameter',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SupplierPart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('notes', InvenTree.fields.InvenTreeNotesField(blank=True, help_text='Markdown notes (optional)', max_length=50000, null=True, verbose_name='Notes')),
                ('barcode_data', models.CharField(blank=True, help_text='Third party barcode data', max_length=500, verbose_name='Barcode Data')),
                ('barcode_hash', models.CharField(blank=True, help_text='Unique hash of barcode data', max_length=128, verbose_name='Barcode Hash')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', null=True, verbose_name='Updated')),
                ('SKU', models.CharField(help_text='Supplier stock keeping unit', max_length=100, verbose_name='SKU')),
                ('active', models.BooleanField(default=True, help_text='Is this supplier part active?', verbose_name='Active')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='URL for external supplier part link', max_length=2000, null=True, verbose_name='Link')),
                ('description', models.CharField(blank=True, help_text='Supplier part description', max_length=250, null=True, verbose_name='Description')),
                ('note', models.CharField(blank=True, help_text='Notes', max_length=100, null=True, verbose_name='Note')),
                ('base_cost', models.DecimalField(decimal_places=3, default=0, help_text='Minimum charge (e.g. stocking fee)', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='base cost')),
                ('packaging', models.CharField(blank=True, help_text='Part packaging', max_length=50, null=True, verbose_name='Packaging')),
                ('pack_quantity', models.CharField(blank=True, help_text='Total quantity supplied in a single pack. Leave empty for single items.', max_length=25, verbose_name='Pack Quantity')),
                ('pack_quantity_native', InvenTree.fields.RoundingDecimalField(decimal_places=10, default=1, max_digits=20, null=True)),
                ('multiple', models.PositiveIntegerField(default=1, help_text='Order multiple', validators=[django.core.validators.MinValueValidator(1)], verbose_name='multiple')),
                ('available', models.DecimalField(decimal_places=3, default=0, help_text='Quantity available from supplier', max_digits=10, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Available')),
                ('availability_updated', models.DateTimeField(blank=True, help_text='Date of last update of availability data', null=True, verbose_name='Availability Updated')),
                ('manufacturer_part', models.ForeignKey(blank=True, help_text='Select manufacturer part', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='supplier_parts', to='company.manufacturerpart', verbose_name='Manufacturer Part')),
            ],
            options={
                'verbose_name': 'Supplier Part',
                'db_table': 'part_supplierpart',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SupplierPriceBreak',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', null=True, verbose_name='Updated')),
                ('quantity', InvenTree.fields.RoundingDecimalField(decimal_places=5, default=1, help_text='Price break quantity', max_digits=15, validators=[django.core.validators.MinValueValidator(1)], verbose_name='Quantity')),
                ('price_currency', djmoney.models.fields.CurrencyField(choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], default='USD', editable=False, max_length=3, null=True)),
                ('price', InvenTree.fields.InvenTreeModelMoneyField(currency_choices=[('AUD', 'Australian Dollar'), ('CAD', 'Canadian Dollar'), ('CNY', 'Chinese Yuan'), ('EUR', 'Euro'), ('GBP', 'British Pound'), ('JPY', 'Japanese Yen'), ('NZD', 'New Zealand Dollar'), ('USD', 'US Dollar')], decimal_places=6, default_currency='USD', help_text='Unit price at specified quantity', max_digits=19, null=True, validators=[djmoney.models.validators.MinMoneyValidator(0)], verbose_name='Price')),
                ('part', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pricebreaks', to='company.supplierpart', verbose_name='Part')),
            ],
            options={
                'verbose_name': 'Supplier Price Break',
                'db_table': 'part_supplierpricebreak',
            },
        ),
    ]
