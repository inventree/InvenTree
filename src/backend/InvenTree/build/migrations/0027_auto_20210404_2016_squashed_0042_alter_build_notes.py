# Generated by Django 4.2.17 on 2025-06-24 21:00

import InvenTree.fields
import build.validators
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import re

from django.db import migrations


def build_refs(apps, schema_editor):
    """
    Rebuild the integer "reference fields" for existing Build objects
    """

    BuildOrder = apps.get_model('build', 'build')

    for build in BuildOrder.objects.all():

        ref = 0

        result = re.match(r"^(\d+)", build.reference)

        if result and len(result.groups()) == 1:
            try:
                ref = int(result.groups()[0])
            except Exception:  # pragma: no cover
                ref = 0

        # Clip integer value to ensure it does not overflow database field
        if ref > 0x7fffffff:
            ref = 0x7fffffff

        build.reference_int = ref
        build.save()


def update_build_reference(apps, schema_editor):
    """Update the build order reference.

    Ref: https://github.com/inventree/InvenTree/pull/3267

    Performs the following steps:
    - Extract existing 'prefix' value
    - Generate a build order pattern based on the prefix value
    - Update any existing build order references with the specified prefix
    """

    InvenTreeSetting = apps.get_model('common', 'inventreesetting')

    try:
        prefix = InvenTreeSetting.objects.get(key='BUILDORDER_REFERENCE_PREFIX').value
    except Exception:
        prefix = 'BO-'

    # Construct a reference pattern
    pattern = prefix + '{ref:04d}'

    # Create or update the BuildOrder.reference pattern
    try:
        setting = InvenTreeSetting.objects.get(key='BUILDORDER_REFERENCE_PATTERN')
        setting.value = pattern
        setting.save()
    except InvenTreeSetting.DoesNotExist:
        setting = InvenTreeSetting.objects.create(
            key='BUILDORDER_REFERENCE_PATTERN',
            value=pattern,
        )

    # Update any existing build order references with the prefix
    Build = apps.get_model('build', 'build')

    n = 0

    for build in Build.objects.all():
        if not build.reference.startswith(prefix):
            build.reference = prefix + build.reference
            build.save()
            n += 1

    if n > 0:
        print(f"Updated reference field for {n} BuildOrder objects")


class Migration(migrations.Migration):

    replaces = [('build', '0027_auto_20210404_2016'), ('build', '0028_builditem_bom_item'), ('build', '0029_auto_20210601_1525'), ('build', '0030_alter_build_reference'), ('build', '0031_build_reference_int'), ('build', '0032_auto_20211014_0632'), ('build', '0033_auto_20211128_0151'), ('build', '0034_alter_build_reference_int'), ('build', '0035_alter_build_notes'), ('build', '0036_auto_20220707_1101'), ('build', '0037_build_priority'), ('build', '0038_alter_build_responsible'), ('build', '0039_auto_20230317_0816'), ('build', '0040_auto_20230404_1310'), ('build', '0041_alter_build_title'), ('build', '0042_alter_build_notes')]

    dependencies = [
        ('stock', '0058_stockitem_packaging'),
        ('build', '0026_auto_20210216_1539'),
        ('users', '0005_owner_model'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('part', '0066_bomitem_allow_variants'),
    ]

    operations = [
        migrations.AlterField(
            model_name='build',
            name='completed_by',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='builds_completed', to=settings.AUTH_USER_MODEL, verbose_name='completed by'),
        ),
        migrations.AlterField(
            model_name='build',
            name='completion_date',
            field=models.DateField(blank=True, null=True, verbose_name='Completion Date'),
        ),
        migrations.AlterField(
            model_name='build',
            name='creation_date',
            field=models.DateField(auto_now_add=True, verbose_name='Creation Date'),
        ),
        migrations.AlterField(
            model_name='build',
            name='issued_by',
            field=models.ForeignKey(blank=True, help_text='User who issued this build order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='builds_issued', to=settings.AUTH_USER_MODEL, verbose_name='Issued by'),
        ),
        migrations.AlterField(
            model_name='build',
            name='responsible',
            field=models.ForeignKey(blank=True, help_text='User responsible for this build order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='builds_responsible', to='users.owner', verbose_name='Responsible'),
        ),
        migrations.AlterField(
            model_name='builditem',
            name='build',
            field=models.ForeignKey(help_text='Build to allocate parts', on_delete=django.db.models.deletion.CASCADE, related_name='allocated_stock', to='build.build', verbose_name='Build'),
        ),
        migrations.AlterField(
            model_name='builditem',
            name='install_into',
            field=models.ForeignKey(blank=True, help_text='Destination stock item', limit_choices_to={'is_building': True}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='items_to_install', to='stock.stockitem', verbose_name='Install into'),
        ),
        migrations.AlterField(
            model_name='builditem',
            name='quantity',
            field=models.DecimalField(decimal_places=5, default=1, help_text='Stock quantity to allocate to build', max_digits=15, validators=[django.core.validators.MinValueValidator(0)], verbose_name='Quantity'),
        ),
        migrations.AlterField(
            model_name='builditem',
            name='stock_item',
            field=models.ForeignKey(help_text='Source stock item', limit_choices_to={'belongs_to': None, 'sales_order': None}, on_delete=django.db.models.deletion.CASCADE, related_name='allocations', to='stock.stockitem', verbose_name='Stock Item'),
        ),
        migrations.AlterField(
            model_name='buildorderattachment',
            name='attachment',
            field=models.FileField(help_text='Select file to attach', upload_to='attachments', verbose_name='Attachment'),
        ),
        migrations.AlterField(
            model_name='buildorderattachment',
            name='comment',
            field=models.CharField(blank=True, help_text='File comment', max_length=100, verbose_name='Comment'),
        ),
        migrations.AlterField(
            model_name='buildorderattachment',
            name='upload_date',
            field=models.DateField(auto_now_add=True, null=True, verbose_name='upload date'),
        ),
        migrations.AlterField(
            model_name='buildorderattachment',
            name='user',
            field=models.ForeignKey(blank=True, help_text='User', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='builditem',
            name='bom_item',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='allocate_build_items', to='part.bomitem'),
        ),
        migrations.AlterField(
            model_name='build',
            name='reference',
            field=models.CharField(default=build.validators.generate_next_build_reference, help_text='Build Order Reference', max_length=64, unique=True, validators=[build.validators.validate_build_order_reference], verbose_name='Reference'),
        ),
        migrations.AddField(
            model_name='build',
            name='reference_int',
            field=models.IntegerField(default=0),
        ),
        migrations.RunPython(
            code=build_refs,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='buildorderattachment',
            name='link',
            field=InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to external URL', max_length=2000, null=True, verbose_name='Link'),
        ),
        migrations.AlterField(
            model_name='buildorderattachment',
            name='attachment',
            field=models.FileField(blank=True, help_text='Select file to attach', null=True, upload_to='attachments', verbose_name='Attachment'),
        ),
        migrations.AlterField(
            model_name='build',
            name='reference_int',
            field=models.BigIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='build',
            name='notes',
            field=InvenTree.fields.InvenTreeNotesField(blank=True, help_text='Extra build notes', max_length=50000, null=True, verbose_name='Notes'),
        ),
        migrations.RunPython(
            code=update_build_reference,
            reverse_code=django.db.migrations.operations.special.RunPython.noop,
        ),
        migrations.AddField(
            model_name='build',
            name='priority',
            field=models.PositiveIntegerField(default=0, help_text='Priority of this build order', validators=[django.core.validators.MinValueValidator(0)], verbose_name='Build Priority'),
        ),
        migrations.AlterField(
            model_name='build',
            name='responsible',
            field=models.ForeignKey(blank=True, help_text='User or group responsible for this build order', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='builds_responsible', to='users.owner', verbose_name='Responsible'),
        ),
        migrations.AddField(
            model_name='build',
            name='metadata',
            field=models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata'),
        ),
        migrations.AddField(
            model_name='builditem',
            name='metadata',
            field=models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata'),
        ),
        migrations.AddField(
            model_name='build',
            name='barcode_data',
            field=models.CharField(blank=True, help_text='Third party barcode data', max_length=500, verbose_name='Barcode Data'),
        ),
        migrations.AddField(
            model_name='build',
            name='barcode_hash',
            field=models.CharField(blank=True, help_text='Unique hash of barcode data', max_length=128, verbose_name='Barcode Hash'),
        ),
        migrations.AlterField(
            model_name='build',
            name='title',
            field=models.CharField(blank=True, help_text='Brief description of the build (optional)', max_length=100, verbose_name='Description'),
        ),
        migrations.AlterField(
            model_name='build',
            name='notes',
            field=InvenTree.fields.InvenTreeNotesField(blank=True, help_text='Markdown notes (optional)', max_length=50000, null=True, verbose_name='Notes'),
        ),
    ]
