# Generated by Django 4.2.19 on 2025-03-10 22:44

import InvenTree.fields
import InvenTree.models
import common.models
import common.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    replaces = [('common', '0001_initial'), ('common', '0002_auto_20190902_2304'), ('common', '0003_auto_20190902_2310'), ('common', '0004_inventreesetting'), ('common', '0005_auto_20190915_1256'), ('common', '0006_auto_20200203_0951'), ('common', '0007_colortheme'), ('common', '0008_remove_inventreesetting_description'), ('common', '0009_delete_currency'), ('common', '0010_migrate_currency_setting'), ('common', '0011_auto_20210722_2114'), ('common', '0012_notificationentry'), ('common', '0013_webhookendpoint_webhookmessage'), ('common', '0014_notificationmessage'), ('common', '0015_newsfeedentry'), ('common', '0016_alter_notificationentry_updated'), ('common', '0017_notesimage'), ('common', '0018_projectcode'), ('common', '0019_projectcode_metadata'), ('common', '0020_customunit'), ('common', '0021_auto_20230805_1748'), ('common', '0022_projectcode_responsible'), ('common', '0023_auto_20240602_1332'), ('common', '0024_notesimage_model_id_notesimage_model_type'), ('common', '0025_attachment'), ('common', '0026_auto_20240608_1238'), ('common', '0027_alter_customunit_symbol'), ('common', '0028_colortheme_user_obj'), ('common', '0029_inventreecustomuserstatemodel'), ('common', '0030_barcodescanresult'), ('common', '0031_auto_20241026_0024'), ('common', '0032_selectionlist_selectionlistentry_and_more'), ('common', '0033_delete_colortheme'), ('common', '0034_alter_inventreecustomuserstatemodel_unique_together_and_more'), ('common', '0035_auto_20250221_1513')]

    initial = True

    dependencies = [
        ('auth', '__first__'),
        ('plugin', '0001_remaked_20250310'),
    ]

    operations = [
        migrations.CreateModel(
            name='Attachment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('model_type', models.CharField(help_text='Target model type for this image', max_length=100, validators=[common.validators.validate_attachment_model_type])),
                ('model_id', models.PositiveIntegerField()),
                ('attachment', models.FileField(blank=True, help_text='Select file to attach', null=True, upload_to=common.models.rename_attachment, verbose_name='Attachment')),
                ('link', InvenTree.fields.InvenTreeURLField(blank=True, help_text='Link to external URL', max_length=2000, null=True, verbose_name='Link')),
                ('comment', models.CharField(blank=True, help_text='Attachment comment', max_length=250, verbose_name='Comment')),
                ('upload_date', models.DateField(auto_now_add=True, help_text='Date the file was uploaded', null=True, verbose_name='Upload date')),
                ('file_size', models.PositiveIntegerField(default=0, help_text='File size in bytes', verbose_name='File size')),
            ],
            options={
                'verbose_name': 'Attachment',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='BarcodeScanResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.CharField(help_text='Barcode data', max_length=250, verbose_name='Data')),
                ('timestamp', models.DateTimeField(auto_now_add=True, help_text='Date and time of the barcode scan', verbose_name='Timestamp')),
                ('endpoint', models.CharField(blank=True, help_text='URL endpoint which processed the barcode', max_length=250, null=True, verbose_name='Path')),
                ('context', models.JSONField(blank=True, help_text='Context data for the barcode scan', max_length=1000, null=True, verbose_name='Context')),
                ('response', models.JSONField(blank=True, help_text='Response data from the barcode scan', max_length=1000, null=True, verbose_name='Response')),
                ('result', models.BooleanField(default=False, help_text='Was the barcode scan successful?', verbose_name='Result')),
            ],
            options={
                'verbose_name': 'Barcode Scan',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='CustomUnit',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Unit name', max_length=50, unique=True, verbose_name='Name')),
                ('symbol', models.CharField(blank=True, help_text='Optional unit symbol', max_length=10, verbose_name='Symbol')),
                ('definition', models.CharField(help_text='Unit definition', max_length=50, verbose_name='Definition')),
            ],
            options={
                'verbose_name': 'Custom Unit',
            },
        ),
        migrations.CreateModel(
            name='InvenTreeCustomUserStateModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reference_status', models.CharField(help_text='Status set that is extended with this custom state', max_length=250, verbose_name='Reference Status Set')),
                ('logical_key', models.IntegerField(help_text='State logical key that is equal to this custom state in business logic', verbose_name='Logical Key')),
                ('key', models.IntegerField(help_text='Numerical value that will be saved in the models database', verbose_name='Value')),
                ('name', models.CharField(help_text='Name of the state', max_length=250, validators=[common.validators.validate_uppercase, common.validators.validate_variable_string], verbose_name='Name')),
                ('label', models.CharField(help_text='Label that will be displayed in the frontend', max_length=250, verbose_name='Label')),
                ('color', models.CharField(choices=[('primary', 'primary'), ('secondary', 'secondary'), ('success', 'success'), ('danger', 'danger'), ('warning', 'warning'), ('info', 'info'), ('dark', 'dark')], default='secondary', help_text='Color that will be displayed in the frontend', max_length=10, verbose_name='Color')),
            ],
            options={
                'verbose_name': 'Custom State',
                'verbose_name_plural': 'Custom States',
            },
        ),
        migrations.CreateModel(
            name='InvenTreeSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, help_text='Settings value', max_length=2000)),
                ('key', models.CharField(help_text='Settings key', max_length=50, unique=True)),
            ],
            options={
                'verbose_name': 'InvenTree Setting',
                'verbose_name_plural': 'InvenTree Settings',
            },
        ),
        migrations.CreateModel(
            name='InvenTreeUserSetting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(blank=True, help_text='Settings value', max_length=2000)),
                ('key', models.CharField(help_text='Settings key', max_length=50)),
            ],
            options={
                'verbose_name': 'InvenTree User Setting',
                'verbose_name_plural': 'InvenTree User Settings',
            },
        ),
        migrations.CreateModel(
            name='NewsFeedEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feed_id', models.CharField(max_length=250, unique=True, verbose_name='Id')),
                ('title', models.CharField(max_length=250, verbose_name='Title')),
                ('link', models.URLField(max_length=250, verbose_name='Link')),
                ('published', models.DateTimeField(max_length=250, verbose_name='Published')),
                ('author', models.CharField(max_length=250, verbose_name='Author')),
                ('summary', models.CharField(max_length=250, verbose_name='Summary')),
                ('read', models.BooleanField(default=False, help_text='Was this news item read?', verbose_name='Read')),
            ],
        ),
        migrations.CreateModel(
            name='NotesImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(help_text='Image file', upload_to=common.models.rename_notes_image, verbose_name='Image')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('model_type', models.CharField(blank=True, help_text='Target model type for this image', max_length=100, null=True, validators=[common.validators.validate_notes_model_type])),
                ('model_id', models.IntegerField(blank=True, default=None, help_text='Target model ID for this image', null=True)),
            ],
        ),
        migrations.CreateModel(
            name='NotificationEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('updated', models.DateTimeField(auto_now=True, help_text='Timestamp of last update', null=True, verbose_name='Updated')),
                ('key', models.CharField(max_length=250)),
                ('uid', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='NotificationMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('target_object_id', models.PositiveIntegerField()),
                ('source_object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('category', models.CharField(max_length=250)),
                ('name', models.CharField(max_length=250)),
                ('message', models.CharField(blank=True, max_length=250, null=True)),
                ('creation', models.DateTimeField(auto_now_add=True)),
                ('read', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='ProjectCode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('code', models.CharField(help_text='Unique project code', max_length=50, unique=True, verbose_name='Project Code')),
                ('description', models.CharField(blank=True, help_text='Project description', max_length=200, verbose_name='Description')),
            ],
            options={
                'verbose_name': 'Project Code',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SelectionList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('metadata', models.JSONField(blank=True, help_text='JSON metadata field, for use by external plugins', null=True, verbose_name='Plugin Metadata')),
                ('name', models.CharField(help_text='Name of the selection list', max_length=100, unique=True, verbose_name='Name')),
                ('description', models.CharField(blank=True, help_text='Description of the selection list', max_length=250, verbose_name='Description')),
                ('locked', models.BooleanField(default=False, help_text='Is this selection list locked?', verbose_name='Locked')),
                ('active', models.BooleanField(default=True, help_text='Can this selection list be used?', verbose_name='Active')),
                ('source_string', models.CharField(blank=True, help_text='Optional string identifying the source used for this list', max_length=1000, verbose_name='Source String')),
                ('created', models.DateTimeField(auto_now_add=True, help_text='Date and time that the selection list was created', verbose_name='Created')),
                ('last_updated', models.DateTimeField(auto_now=True, help_text='Date and time that the selection list was last updated', verbose_name='Last Updated')),
            ],
            options={
                'verbose_name': 'Selection List',
                'verbose_name_plural': 'Selection Lists',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='WebhookEndpoint',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('endpoint_id', models.CharField(default=uuid.uuid4, editable=False, help_text='Endpoint at which this webhook is received', max_length=255, verbose_name='Endpoint')),
                ('name', models.CharField(blank=True, help_text='Name for this webhook', max_length=255, null=True, verbose_name='Name')),
                ('active', models.BooleanField(default=True, help_text='Is this webhook active', verbose_name='Active')),
                ('token', models.CharField(blank=True, default=uuid.uuid4, help_text='Token for access', max_length=255, null=True, verbose_name='Token')),
                ('secret', models.CharField(blank=True, help_text='Shared secret for HMAC', max_length=255, null=True, verbose_name='Secret')),
                ('user', models.ForeignKey(blank=True, help_text='User', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
        ),
        migrations.CreateModel(
            name='WebhookMessage',
            fields=[
                ('message_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique identifier for this message', primary_key=True, serialize=False, verbose_name='Message ID')),
                ('host', models.CharField(editable=False, help_text='Host from which this message was received', max_length=255, verbose_name='Host')),
                ('header', models.CharField(blank=True, editable=False, help_text='Header of this message', max_length=255, null=True, verbose_name='Header')),
                ('body', models.JSONField(blank=True, editable=False, help_text='Body of this message', null=True, verbose_name='Body')),
                ('worked_on', models.BooleanField(default=False, help_text='Was the work on this message finished?', verbose_name='Worked on')),
                ('endpoint', models.ForeignKey(blank=True, help_text='Endpoint on which this message was received', null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.webhookendpoint', verbose_name='Endpoint')),
            ],
        ),
        migrations.CreateModel(
            name='SelectionListEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(help_text='Value of the selection list entry', max_length=255, verbose_name='Value')),
                ('label', models.CharField(help_text='Label for the selection list entry', max_length=255, verbose_name='Label')),
                ('description', models.CharField(blank=True, help_text='Description of the selection list entry', max_length=250, verbose_name='Description')),
                ('active', models.BooleanField(default=True, help_text='Is this selection list entry active?', verbose_name='Active')),
                ('list', models.ForeignKey(blank=True, help_text='Selection list to which this entry belongs', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='entries', to='common.selectionlist', verbose_name='Selection List')),
            ],
            options={
                'verbose_name': 'Selection List Entry',
                'verbose_name_plural': 'Selection List Entries',
            },
        ),
        migrations.AddField(
            model_name='selectionlist',
            name='default',
            field=models.ForeignKey(blank=True, help_text='Default entry for this selection list', null=True, on_delete=django.db.models.deletion.SET_NULL, to='common.selectionlistentry', verbose_name='Default Entry'),
        ),
        migrations.AddField(
            model_name='selectionlist',
            name='source_plugin',
            field=models.ForeignKey(blank=True, help_text='Plugin which provides the selection list', null=True, on_delete=django.db.models.deletion.SET_NULL, to='plugin.pluginconfig', verbose_name='Source Plugin'),
        ),
    ]
