# Generated by Django 4.2.23 on 2025-07-13 11:17

import InvenTree.fields
import InvenTree.models
import common.validators
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    replaces = [
        ("common", "0032_selectionlist_selectionlistentry_and_more"),
        ("common", "0033_delete_colortheme"),
        ("common", "0034_alter_inventreecustomuserstatemodel_unique_together_and_more"),
        ("common", "0035_auto_20250221_1513"),
        ("common", "0036_alter_attachment_link"),
        ("common", "0037_dataoutput"),
        ("common", "0038_alter_attachment_model_type"),
        ("common", "0039_emailthread_emailmessage"),
    ]

    dependencies = [
        ("plugin", "0009_alter_pluginconfig_key"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("common", "0031_auto_20241026_0024"),
    ]

    operations = [
        migrations.CreateModel(
            name="SelectionList",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="JSON metadata field, for use by external plugins",
                        null=True,
                        verbose_name="Plugin Metadata",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Name of the selection list",
                        max_length=100,
                        unique=True,
                        verbose_name="Name",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description of the selection list",
                        max_length=250,
                        verbose_name="Description",
                    ),
                ),
                (
                    "locked",
                    models.BooleanField(
                        default=False,
                        help_text="Is this selection list locked?",
                        verbose_name="Locked",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Can this selection list be used?",
                        verbose_name="Active",
                    ),
                ),
                (
                    "source_string",
                    models.CharField(
                        blank=True,
                        help_text="Optional string identifying the source used for this list",
                        max_length=1000,
                        verbose_name="Source String",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time that the selection list was created",
                        verbose_name="Created",
                    ),
                ),
                (
                    "last_updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time that the selection list was last updated",
                        verbose_name="Last Updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "Selection List",
                "verbose_name_plural": "Selection Lists",
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="SelectionListEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "value",
                    models.CharField(
                        help_text="Value of the selection list entry",
                        max_length=255,
                        verbose_name="Value",
                    ),
                ),
                (
                    "label",
                    models.CharField(
                        help_text="Label for the selection list entry",
                        max_length=255,
                        verbose_name="Label",
                    ),
                ),
                (
                    "description",
                    models.CharField(
                        blank=True,
                        help_text="Description of the selection list entry",
                        max_length=250,
                        verbose_name="Description",
                    ),
                ),
                (
                    "active",
                    models.BooleanField(
                        default=True,
                        help_text="Is this selection list entry active?",
                        verbose_name="Active",
                    ),
                ),
                (
                    "list",
                    models.ForeignKey(
                        blank=True,
                        help_text="Selection list to which this entry belongs",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="entries",
                        to="common.selectionlist",
                        verbose_name="Selection List",
                    ),
                ),
            ],
            options={
                "verbose_name": "Selection List Entry",
                "verbose_name_plural": "Selection List Entries",
                "unique_together": {("list", "value")},
            },
        ),
        migrations.AddField(
            model_name="selectionlist",
            name="default",
            field=models.ForeignKey(
                blank=True,
                help_text="Default entry for this selection list",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="common.selectionlistentry",
                verbose_name="Default Entry",
            ),
        ),
        migrations.AddField(
            model_name="selectionlist",
            name="source_plugin",
            field=models.ForeignKey(
                blank=True,
                help_text="Plugin which provides the selection list",
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                to="plugin.pluginconfig",
                verbose_name="Source Plugin",
            ),
        ),
        migrations.DeleteModel(
            name="ColorTheme",
        ),
        migrations.AlterUniqueTogether(
            name="inventreecustomuserstatemodel",
            unique_together=set(),
        ),
        migrations.AlterField(
            model_name="inventreecustomuserstatemodel",
            name="key",
            field=models.IntegerField(
                help_text="Numerical value that will be saved in the models database",
                verbose_name="Value",
            ),
        ),
        migrations.AlterField(
            model_name="inventreecustomuserstatemodel",
            name="name",
            field=models.CharField(
                help_text="Name of the state",
                max_length=250,
                validators=[
                    common.validators.validate_uppercase,
                    common.validators.validate_variable_string,
                ],
                verbose_name="Name",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="inventreecustomuserstatemodel",
            unique_together={("reference_status", "name"), ("reference_status", "key")},
        ),
        migrations.AlterField(
            model_name="attachment",
            name="link",
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name="attachment",
            name="link",
            field=InvenTree.fields.InvenTreeURLField(
                blank=True,
                help_text="Link to external URL",
                max_length=2000,
                null=True,
                verbose_name="Link",
            ),
        ),
        migrations.CreateModel(
            name="DataOutput",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateField(auto_now_add=True)),
                ("total", models.PositiveIntegerField(default=1)),
                ("progress", models.PositiveIntegerField(default=0)),
                ("complete", models.BooleanField(default=False)),
                (
                    "output_type",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                (
                    "template_name",
                    models.CharField(blank=True, max_length=100, null=True),
                ),
                ("plugin", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "output",
                    models.FileField(blank=True, null=True, upload_to="data_output"),
                ),
                ("errors", models.JSONField(blank=True, null=True)),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
        ),
        migrations.AlterField(
            model_name="attachment",
            name="model_type",
            field=models.CharField(
                help_text="Target model type for image",
                max_length=100,
                validators=[common.validators.validate_attachment_model_type],
                verbose_name="Model type",
            ),
        ),
        migrations.CreateModel(
            name="EmailThread",
            fields=[
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        help_text="JSON metadata field, for use by external plugins",
                        null=True,
                        verbose_name="Plugin Metadata",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        blank=True,
                        help_text="Unique key for this thread (used to identify the thread)",
                        max_length=250,
                        null=True,
                        verbose_name="Key",
                    ),
                ),
                (
                    "global_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this thread",
                        primary_key=True,
                        serialize=False,
                        verbose_name="Global ID",
                    ),
                ),
                (
                    "started_internal",
                    models.BooleanField(
                        default=False,
                        help_text="Was this thread started internally?",
                        verbose_name="Started Internal",
                    ),
                ),
                (
                    "created",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time that the thread was created",
                        verbose_name="Created",
                    ),
                ),
                (
                    "updated",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time that the thread was last updated",
                        verbose_name="Updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Thread",
                "verbose_name_plural": "Email Threads",
                "ordering": ["-updated"],
                "unique_together": {("key", "global_id")},
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name="EmailMessage",
            fields=[
                (
                    "global_id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        help_text="Unique identifier for this message",
                        primary_key=True,
                        serialize=False,
                        unique=True,
                        verbose_name="Global ID",
                    ),
                ),
                (
                    "message_id_key",
                    models.CharField(
                        blank=True,
                        help_text="Identifier for this message (might be supplied by external system)",
                        max_length=250,
                        null=True,
                        verbose_name="Message ID",
                    ),
                ),
                (
                    "thread_id_key",
                    models.CharField(
                        blank=True,
                        help_text="Identifier for this message thread (might be supplied by external system)",
                        max_length=250,
                        null=True,
                        verbose_name="Thread ID",
                    ),
                ),
                ("subject", models.CharField(max_length=250)),
                ("body", models.TextField()),
                ("to", models.EmailField(max_length=254)),
                ("sender", models.EmailField(max_length=254)),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("A", "Announced"),
                            ("S", "Sent"),
                            ("F", "Failed"),
                            ("D", "Delivered"),
                            ("R", "Read"),
                            ("C", "Confirmed"),
                        ],
                        max_length=50,
                        null=True,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                ("headers", models.JSONField(blank=True, null=True)),
                ("full_message", models.TextField(blank=True, null=True)),
                (
                    "direction",
                    models.CharField(
                        blank=True,
                        choices=[("I", "Inbound"), ("O", "Outbound")],
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "priority",
                    models.IntegerField(
                        choices=[
                            (0, "None"),
                            (1, "Very High"),
                            (2, "High"),
                            (3, "Normal"),
                            (4, "Low"),
                            (5, "Very Low"),
                        ],
                        verbose_name="Prioriy",
                    ),
                ),
                ("delivery_options", models.JSONField(blank=True, null=True)),
                ("error_code", models.CharField(blank=True, max_length=50, null=True)),
                ("error_message", models.TextField(blank=True, null=True)),
                ("error_timestamp", models.DateTimeField(blank=True, null=True)),
                (
                    "thread",
                    models.ForeignKey(
                        blank=True,
                        help_text="Linked thread for this message",
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="messages",
                        to="common.emailthread",
                        verbose_name="Thread",
                    ),
                ),
            ],
            options={
                "verbose_name": "Email Message",
                "verbose_name_plural": "Email Messages",
            },
        ),
    ]
