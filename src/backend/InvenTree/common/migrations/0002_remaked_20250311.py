# Generated by Django 4.2.19 on 2025-03-11 06:59

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    replaces = [('common', '0036_alter_attachment_link')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),
        ('users', '0001_remaked_20250311'),
        ('auth', '__first__'),
        ('common', '0001_remaked_20250311'),
    ]

    operations = [
        migrations.AddField(
            model_name='projectcode',
            name='responsible',
            field=models.ForeignKey(blank=True, help_text='User or group responsible for this project', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project_codes', to='users.owner', verbose_name='Responsible'),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='source_content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='notification_source', to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='target_content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notification_target', to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='user',
            field=models.ForeignKey(blank=True, help_text='User', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterUniqueTogether(
            name='notificationentry',
            unique_together={('key', 'uid')},
        ),
        migrations.AddField(
            model_name='notesimage',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='inventreeusersetting',
            name='user',
            field=models.ForeignKey(blank=True, help_text='User', null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='inventreecustomuserstatemodel',
            name='model',
            field=models.ForeignKey(blank=True, help_text='Model this state is associated with', null=True, on_delete=django.db.models.deletion.SET_NULL, to='contenttypes.contenttype', verbose_name='Model'),
        ),
        migrations.AddField(
            model_name='barcodescanresult',
            name='user',
            field=models.ForeignKey(blank=True, help_text='User who scanned the barcode', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='attachment',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='attachment',
            name='upload_user',
            field=models.ForeignKey(blank=True, help_text='User', null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterUniqueTogether(
            name='selectionlistentry',
            unique_together={('list', 'value')},
        ),
        migrations.AddConstraint(
            model_name='inventreeusersetting',
            constraint=models.UniqueConstraint(fields=('key', 'user'), name='unique key and user'),
        ),
        migrations.AlterUniqueTogether(
            name='inventreecustomuserstatemodel',
            unique_together={('reference_status', 'key'), ('reference_status', 'name')},
        ),
    ]
