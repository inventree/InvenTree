# Generated by Django 4.2.23 on 2025-08-21 16:23

import InvenTree.models
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    dependencies = [
        ('plugin', '0011_delete_notificationusersetting'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('common', '0039_emailthread_emailmessage'),
    ]

    operations = [
        migrations.CreateModel(
            name='ReferenceSource',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'metadata',
                    models.JSONField(
                        blank=True,
                        help_text='JSON metadata field, for use by external plugins',
                        null=True,
                        verbose_name='Plugin Metadata',
                    ),
                ),
                (
                    'name',
                    models.CharField(
                        help_text='Name of the reference source',
                        max_length=100,
                        unique=True,
                        verbose_name='Name',
                    ),
                ),
                (
                    'description',
                    models.CharField(
                        blank=True,
                        help_text='Description of the reference source',
                        max_length=250,
                        verbose_name='Description',
                    ),
                ),
                (
                    'locked',
                    models.BooleanField(
                        default=False,
                        help_text='Is this reference source locked?',
                        verbose_name='Locked',
                    ),
                ),
                (
                    'active',
                    models.BooleanField(
                        default=True,
                        help_text='Can this reference source be used?',
                        verbose_name='Active',
                    ),
                ),
                (
                    'source_string',
                    models.CharField(
                        blank=True,
                        help_text='Optional string identifying the source used for this reference source',
                        max_length=1000,
                        verbose_name='Source String',
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text='Date and time that the reference source was created',
                        verbose_name='Created',
                    ),
                ),
                (
                    'last_updated',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Date and time that the reference source was last updated',
                        verbose_name='Last Updated',
                    ),
                ),
                (
                    'validation_pattern',
                    models.CharField(
                        blank=True,
                        help_text='Regular expression pattern to validate a reference',
                        max_length=250,
                        verbose_name='Validation Pattern',
                    ),
                ),
                (
                    'max_length',
                    models.PositiveIntegerField(
                        default=100,
                        help_text='Maximum length of the reference string',
                        verbose_name='Max Length',
                    ),
                ),
                (
                    'reference_is_unique_global',
                    models.BooleanField(
                        default=False,
                        help_text='Are references unique globally?',
                        verbose_name='Unique Globally',
                    ),
                ),
                (
                    'reference_is_link',
                    models.BooleanField(
                        default=False,
                        help_text='Are references required to be valid URIs as per RFC 3986?',
                        verbose_name='Reference is Link',
                    ),
                ),
                (
                    'source_plugin',
                    models.ForeignKey(
                        blank=True,
                        help_text='Plugin which provides the reference source',
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to='plugin.pluginconfig',
                        verbose_name='Source Plugin',
                    ),
                ),
            ],
            options={
                'verbose_name': 'Reference Source',
                'verbose_name_plural': 'Reference Sources',
            },
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
        migrations.CreateModel(
            name='Reference',
            fields=[
                (
                    'id',
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name='ID',
                    ),
                ),
                (
                    'metadata',
                    models.JSONField(
                        blank=True,
                        help_text='JSON metadata field, for use by external plugins',
                        null=True,
                        verbose_name='Plugin Metadata',
                    ),
                ),
                (
                    'target_object_id',
                    models.PositiveIntegerField(
                        help_text='ID of the target object',
                        verbose_name='Target Object ID',
                    ),
                ),
                (
                    'value',
                    models.CharField(
                        help_text='Raw value of the reference',
                        max_length=255,
                        verbose_name='Value',
                    ),
                ),
                (
                    'locked',
                    models.BooleanField(
                        default=False,
                        help_text='Is this reference locked?',
                        verbose_name='Locked',
                    ),
                ),
                (
                    'created',
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text='Date and time that the reference was created',
                        verbose_name='Created',
                    ),
                ),
                (
                    'last_updated',
                    models.DateTimeField(
                        auto_now=True,
                        help_text='Date and time that the reference was last updated',
                        verbose_name='Last Updated',
                    ),
                ),
                (
                    'checked',
                    models.BooleanField(
                        default=False,
                        help_text='Was this reference checked to be valid?',
                        verbose_name='Checked',
                    ),
                ),
                (
                    'last_checked',
                    models.DateTimeField(
                        blank=True,
                        help_text='Date and time that the reference was last checked',
                        null=True,
                        verbose_name='Last Checked',
                    ),
                ),
                (
                    'source',
                    models.ForeignKey(
                        help_text='Reference source that defined this reference',
                        on_delete=django.db.models.deletion.CASCADE,
                        to='common.referencesource',
                        verbose_name='Source',
                    ),
                ),
                (
                    'target_content_type',
                    models.ForeignKey(
                        help_text='Content type of the target object',
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='reference_target',
                        to='contenttypes.contenttype',
                        verbose_name='Target Content Type',
                    ),
                ),
            ],
            options={'abstract': False},
            bases=(InvenTree.models.PluginValidationMixin, models.Model),
        ),
    ]
